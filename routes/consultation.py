# File: routes/consultation.py
from fastapi import APIRouter, HTTPException
from models import ChatRequest, QuickConsultRequest
from utils import process_chat_query, gemini_generate_text
import httpx
import json

router = APIRouter()

async def fetch_courses():
    """L·∫•y danh s√°ch s·∫£n ph·∫©m t·ª´ API"""
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.get("https://api.music.3docorp.vn/api/Course###")
            response.raise_for_status()
            data = response.json()
            return data.get("data", [])
    except Exception as e:
        print(f"Error fetching courses: {e}")
        return []

def format_courses_for_prompt(courses):
    """Format danh s√°ch s·∫£n ph·∫©m th√†nh text cho Gemini"""
    formatted = "DANH S√ÅCH S·∫¢N PH·∫®M C√ì S·∫¥N:\n\n"
    for course in courses:
        price = course.get("discountPrice") or course.get("price", 0)
        
        # X·ª≠ l√Ω category an to√†n
        category = course.get('category')
        category_name = category.get('name') if category and isinstance(category, dict) else 'N/A'
        
        # X·ª≠ l√Ω level an to√†n
        level = course.get('level')
        level_name = level.get('name') if level and isinstance(level, dict) else 'N/A'
        
        formatted += f"""
ID: {course.get('courseId')}
T√™n: {course.get('title')}
Gi√°: {price:,}ƒë
Danh m·ª•c: {category_name}
Tr√¨nh ƒë·ªô: {level_name}
T·ªìn kho: {course.get('stock', 0)}
---
"""
    return formatted

async def extract_product_id_from_response(ai_response: str, courses: list) -> int:
    """
    Tr√≠ch xu·∫•t product ID ph√π h·ª£p nh·∫•t t·ª´ response c·ªßa AI
    S·ª≠ d·ª•ng keyword matching v·ªõi t√™n s·∫£n ph·∫©m
    """
    ai_lower = ai_response.lower()
    
    # Danh s√°ch t·ª´ kh√≥a ƒë·ªÉ mapping
    keywords_map = {
        1: ["s√°o tr√∫c", "s√°o", "tr√∫c", "tone d"],
        2: ["piano", "ƒë√†n piano", "donner", "ddp-200"],
        3: ["cajon", "tr·ªëng", "meinl", "mcaj100"],
        4: ["guitar", "ƒë·ªùn guitar"]
    }
    
    # T√≠nh ƒëi·ªÉm match cho m·ªói s·∫£n ph·∫©m
    scores = {}
    for course_id, keywords in keywords_map.items():
        score = sum(1 for kw in keywords if kw in ai_lower)
        if score > 0:
            scores[course_id] = score
    
    # Tr·∫£ v·ªÅ ID c√≥ ƒëi·ªÉm cao nh·∫•t
    if scores:
        return max(scores, key=scores.get)
    
    # Fallback: tr·∫£ v·ªÅ s·∫£n ph·∫©m ƒë·∫ßu ti√™n c√≥ trong danh s√°ch
    return courses[0].get('courseId', 1) if courses else 1

@router.post("/")
async def consult_instrument(request: ChatRequest):
    """Endpoint chat th√¥ng th∆∞·ªùng v·ªõi history"""
    response = await process_chat_query(request.query, request.history, intent="consultation")
    
    new_entry = {"user": request.query, "ai": response}
    updated_history = request.history.copy()
    updated_history.append(new_entry)
    
    return {
        "suggestion": response,
        "updated_history": updated_history
    }

@router.post("/quick")
async def quick_consult(request: QuickConsultRequest):
    """
    Endpoint t∆∞ v·∫•n nhanh - t√≠ch h·ª£p v·ªõi API s·∫£n ph·∫©m
    Tr·∫£ v·ªÅ g·ª£i √Ω + suggesstionProductId
    """
    # L·∫•y danh s√°ch s·∫£n ph·∫©m
    courses = await fetch_courses()
    
    if not courses:
        raise HTTPException(status_code=503, detail="Kh√¥ng th·ªÉ l·∫•y th√¥ng tin s·∫£n ph·∫©m")
    
    # Format th√¥ng tin s·∫£n ph·∫©m
    courses_info = format_courses_for_prompt(courses)
    
    prompt = f"""
üéØ QUY T·∫ÆC: Tr·∫£ l·ªùi T·ªêI ƒêA 3-4 c√¢u (60-80 t·ª´)

{courses_info}

TH√îNG TIN KH√ÅCH H√ÄNG:
- Tr√¨nh ƒë·ªô: {request.level}
- Ng√¢n s√°ch: {request.budget}
- M·ª•c ƒë√≠ch: {request.purpose}
- Lo·∫°i nh·∫°c c·ª•: {request.instrument_type or "Ch∆∞a x√°c ƒë·ªãnh"}
- ƒê·ªô tu·ªïi: {request.age or "Kh√¥ng r√µ"}
- Th√™m: {request.additional_info or "Kh√¥ng c√≥"}

Vai tr√≤: Chuy√™n gia t∆∞ v·∫•n nh·∫°c c·ª• d√¢n t·ªôc Vi·ªát Nam

Nhi·ªám v·ª•:
1. Ch·ªçn 1 S·∫¢N PH·∫®M C·ª§ TH·ªÇ t·ª´ danh s√°ch tr√™n ph√π h·ª£p nh·∫•t
2. G·ª£i √Ω NG·∫ÆN G·ªåN theo format:

"V·ªõi [tr√¨nh ƒë·ªô] v√† [m·ª•c ƒë√≠ch], n√™n ch·ªçn [T√äN CH√çNH X√ÅC S·∫¢N PH·∫®M] gi√° [X]k, [ƒë·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t], k√®m [combo ph·ª• ki·ªán n·∫øu c√≥]."

V√≠ d·ª• t·ªët:
"V·ªõi ng∆∞·ªùi m·ªõi h·ªçc v√† m·ª•c ƒë√≠ch t·ª± h·ªçc t·∫°i nh√†, n√™n ch·ªçn S√°o tr√∫c cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu gi√° 299k, d·ªÖ th·ªïi, √¢m ·∫•m, k√®m gi√°o tr√¨nh PDF + t√∫i v·∫£i + d√¢y treo."

L∆ØU √ù: 
- Ph·∫£i GHI R√ï T√äN S·∫¢N PH·∫®M t·ª´ danh s√°ch
- CH·ªà g·ª£i √Ω 1 s·∫£n ph·∫©m duy nh·∫•t
- ∆Øu ti√™n s·∫£n ph·∫©m c√≤n h√†ng (stock > 0)
- Ph√π h·ª£p v·ªõi ng√¢n s√°ch
"""
    
    # G·ªçi Gemini ƒë·ªÉ sinh g·ª£i √Ω
    ai_suggestion = await gemini_generate_text(prompt)
    
    # Tr√≠ch xu·∫•t product ID t·ª´ response
    suggested_product_id = await extract_product_id_from_response(ai_suggestion, courses)
    
    return {
        "suggestion": ai_suggestion,
        "suggesstionProductId": suggested_product_id,
        "user_profile": {
            "level": request.level,
            "budget": request.budget,
            "purpose": request.purpose,
            "instrument_type": request.instrument_type,
            "age": request.age
        }
    }