from fastapi import APIRouter, HTTPException
from fastapi.responses import StreamingResponse, FileResponse
from models import ProductDemoRequest
from ai_music import AIMusicGenerator
import os
import logging
import unicodedata

logger = logging.getLogger(__name__)

router = APIRouter()

SAMPLE_DIR = "samples"
INSTRUMENT_SAMPLES = {
    "sao": "sao.mp3",
    "dan tranh": "dan_tranh.mp3",
    "dan bau": "dan_bau.mp3",
    "dan nguyet": "dan_nguyet.mp3",
    "dan nhi": "dan_nhi.mp3",
    "dan da": "dan_da.mp3",
    "dan day": "dan_day.mp3",
    "dan sen": "dan_sen.mp3",
    "dan ty ba": "dan_ty_ba.mp3",
    "danh tranh": "danh_tranh1.mp3",
    "ken be": "khen_be.mp3",
    "t rung": "t_rung.mp3",
}


def normalize_text(text: str) -> str:
    """
    Chu·∫©n h√≥a text: b·ªè d·∫•u, chuy·ªÉn th√†nh ch·ªØ th∆∞·ªùng
    V√≠ d·ª•: "ƒê√†n Tranh" -> "dan tranh"
    """
    if not text:
        return ""
    
    # B·ªè d·∫•u ti·∫øng Vi·ªát
    text = unicodedata.normalize('NFD', text)
    text = ''.join(char for char in text if unicodedata.category(char) != 'Mn')
    
    # Chuy·ªÉn ƒë -> d, ƒê -> d
    text = text.replace('ƒë', 'd').replace('ƒê', 'd')
    
    # Chuy·ªÉn th√†nh ch·ªØ th∆∞·ªùng v√† b·ªè kho·∫£ng tr·∫Øng th·ª´a
    text = text.lower().strip()
    
    # Chu·∫©n h√≥a nhi·ªÅu kho·∫£ng tr·∫Øng th√†nh 1
    text = ' '.join(text.split())
    
    return text


def find_instrument_sample(instrument_name: str) -> str:
    """
    T√¨m file sample cho nh·∫°c c·ª•, h·ªó tr·ª£ c·∫£ c√≥ d·∫•u v√† kh√¥ng d·∫•u
    Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n file n·∫øu t√¨m th·∫•y, None n·∫øu kh√¥ng
    """
    normalized_input = normalize_text(instrument_name)
    
    # T√¨m trong dictionary
    for key, filename in INSTRUMENT_SAMPLES.items():
        if normalize_text(key) == normalized_input:
            file_path = os.path.join(SAMPLE_DIR, filename)
            if os.path.exists(file_path):
                return file_path
    
    return None


# Kh·ªüi t·∫°o AI Generator v·ªõi auto-detect device
try:
    logger.info("üöÄ Initializing AI Music Generator...")
    ai_generator = AIMusicGenerator()  # T·ª± ƒë·ªông detect device t·ªët nh·∫•t
    
    # In ra th√¥ng tin device
    device_info = ai_generator.get_device_info()
    logger.info(f"üìä Device Info: {device_info}")
    
except Exception as e:
    logger.error(f"‚ùå L·ªói kh·ªüi t·∫°o AIMusicGenerator: {str(e)}")
    ai_generator = None


@router.get("/device-info")
async def get_device_info():
    """
    API ƒë·ªÉ check xem ƒëang d√πng GPU hay CPU
    """
    if ai_generator is None:
        raise HTTPException(status_code=500, detail="AI Generator ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o")
    
    info = ai_generator.get_device_info()
    
    # Th√™m th√¥ng tin v·ªÅ t·ªëc ƒë·ªô ∆∞·ªõc t√≠nh
    if info["device"] == "cuda":
        info["estimated_speed"] = "8-10x faster than CPU"
        info["estimated_time_10s"] = "~6-8 seconds"
    elif info["device"] == "mps":
        info["estimated_speed"] = "3-5x faster than CPU"
        info["estimated_time_10s"] = "~15-20 seconds"
    else:
        info["estimated_speed"] = "baseline (CPU)"
        info["estimated_time_10s"] = "~60 seconds"
    
    return info


@router.post("/")
async def demo_audio(request: ProductDemoRequest):
    """
    API tr·∫£ v·ªÅ demo √¢m thanh nh·∫°c c·ª•
    - N·∫øu use_ai = False v√† c√≥ sample th·∫≠t th√¨ tr·∫£ v·ªÅ file sample
    - N·∫øu use_ai = True ho·∫∑c kh√¥ng c√≥ sample th√¨ d√πng AI generator
    H·ªó tr·ª£ c·∫£ t√™n c√≥ d·∫•u v√† kh√¥ng d·∫•u (vd: "ƒë√†n tranh" ho·∫∑c "dan tranh")
    """
    instrument = request.product

    # Ki·ªÉm tra sample file tr∆∞·ªõc (n·∫øu kh√¥ng d√πng AI)
    if not request.use_ai:
        sample_path = find_instrument_sample(instrument)
        if sample_path:
            logger.info(f"‚úÖ Tr·∫£ file m·∫´u cho {instrument}")
            return FileResponse(
                sample_path,
                media_type="audio/wav",
                headers={"Content-Disposition": f"attachment; filename={normalize_text(instrument)}_demo.wav"},
            )
        else:
            logger.warning(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file m·∫´u cho {instrument}, chuy·ªÉn sang AI")

    # S·ª≠ d·ª•ng AI Generator
    if ai_generator is None:
        raise HTTPException(status_code=500, detail="Tr√¨nh t·∫°o √¢m thanh AI ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o")

    try:
        logger.info(f"üéµ ƒêang t·∫°o √¢m thanh AI cho {instrument} tr√™n {ai_generator.device}...")
        
        # Chu·∫©n h√≥a t√™n nh·∫°c c·ª• cho AI (b·ªè d·∫•u ƒë·ªÉ mapping v·ªõi instrument_map)
        normalized_instrument = normalize_text(instrument)
        
        audio_io = ai_generator.generate(
            instrument=normalized_instrument,
            style=request.style,
            duration=request.duration,
        )
        
        logger.info(f"‚úÖ ƒê√£ t·∫°o xong √¢m thanh AI cho {instrument}")
        
        return StreamingResponse(
            audio_io,
            media_type="audio/wav",
            headers={"Content-Disposition": f"attachment; filename={normalized_instrument}_ai_demo.wav"},
        )
    except Exception as e:
        logger.error(f"‚ùå L·ªói t·∫°o √¢m thanh AI: {str(e)}")
        raise HTTPException(status_code=500, detail=f"T·∫°o √¢m thanh th·∫•t b·∫°i: {str(e)}")


@router.post("/clear-cache")
async def clear_cache():
    """
    API ƒë·ªÉ x√≥a cache (n·∫øu c·∫ßn gi·∫£i ph√≥ng dung l∆∞·ª£ng)
    """
    if ai_generator is None:
        raise HTTPException(status_code=500, detail="AI Generator ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o")
    
    try:
        ai_generator.clear_cache()
        return {"status": "success", "message": "Cache ƒë√£ ƒë∆∞·ª£c x√≥a"}
    except Exception as e:
        logger.error(f"‚ùå L·ªói x√≥a cache: {str(e)}")
        raise HTTPException(status_code=500, detail=f"X√≥a cache th·∫•t b·∫°i: {str(e)}")