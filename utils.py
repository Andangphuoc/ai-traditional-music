# File: utils.py
# T·ªëi ∆∞u cho chatbot tr·∫£ l·ªùi ng·∫Øn g·ªçn, ƒë√∫ng tr·ªçng t√¢m
import os
from dotenv import load_dotenv
import google.generativeai as genai
from functools import lru_cache
import logging
from typing import List, Dict, Optional

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

try:
    genai.configure(api_key=os.getenv('GEMINI_API_KEY'))
    gemini_model = genai.GenerativeModel('gemini-2.5-flash')
except Exception as e:
    logger.error(f"‚ùå L·ªói kh·ªüi t·∫°o Gemini API: {str(e)}")
    gemini_model = None

async def gemini_generate_text(prompt: str) -> str:
    if gemini_model is None:
        return "Gemini API ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh"
    try:
        response = await gemini_model.generate_content_async(prompt)
        return response.text.strip()
    except Exception as e:
        logger.error(f"‚ùå L·ªói t·∫°o vƒÉn b·∫£n Gemini: {str(e)}")
        return f"L·ªói t·∫°o vƒÉn b·∫£n: {str(e)}"

def extract_user_context(history: List[Dict[str, str]]) -> Dict[str, Optional[str]]:
    """
    Ph√¢n t√≠ch l·ªãch s·ª≠ ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin ng∆∞·ªùi d√πng ƒë√£ cung c·∫•p
    """
    context = {
        "level": None,      # Tr√¨nh ƒë·ªô: m·ªõi h·ªçc, trung c·∫•p, chuy√™n nghi·ªáp
        "budget": None,     # Ng√¢n s√°ch: d∆∞·ªõi 500k, 500k-1tr, tr√™n 1tr
        "purpose": None,    # M·ª•c ƒë√≠ch: h·ªçc, bi·ªÉu di·ªÖn, trang tr√≠, s∆∞u t·∫ßm
        "instrument": None, # Nh·∫°c c·ª• ƒëang quan t√¢m
        "age": None         # ƒê·ªô tu·ªïi (n·∫øu c√≥)
    }
    
    if not history:
        return context
    
    # Ph√¢n t√≠ch t·ª´ l·ªãch s·ª≠ (l·∫•y th√¥ng tin t·ª´ c√¢u h·ªèi ng∆∞·ªùi d√πng)
    all_queries = " ".join([item['user'].lower() for item in history])
    
    # Tr√¨nh ƒë·ªô
    if any(k in all_queries for k in ["m·ªõi", "ch∆∞a bi·∫øt", "b·∫Øt ƒë·∫ßu", "h·ªçc l·∫ßn ƒë·∫ßu"]):
        context["level"] = "m·ªõi h·ªçc"
    elif any(k in all_queries for k in ["ƒë√£ bi·∫øt", "bi·∫øt c∆° b·∫£n", "trung b√¨nh"]):
        context["level"] = "trung c·∫•p"
    elif any(k in all_queries for k in ["chuy√™n nghi·ªáp", "bi·ªÉu di·ªÖn", "gi·ªèi"]):
        context["level"] = "chuy√™n nghi·ªáp"
    
    # Ng√¢n s√°ch
    if any(k in all_queries for k in ["r·∫ª", "d∆∞·ªõi 500", "gi√° th·∫•p"]):
        context["budget"] = "d∆∞·ªõi 500k"
    elif any(k in all_queries for k in ["t·∫ßm 1 tri·ªáu", "500k", "gi√° v·ª´a"]):
        context["budget"] = "500k-1tr"
    elif any(k in all_queries for k in ["cao c·∫•p", "tr√™n 1 tri·ªáu", "ch·∫•t l∆∞·ª£ng t·ªët"]):
        context["budget"] = "tr√™n 1tr"
    
    # M·ª•c ƒë√≠ch
    if any(k in all_queries for k in ["h·ªçc", "t·∫≠p", "luy·ªán"]):
        context["purpose"] = "h·ªçc"
    elif any(k in all_queries for k in ["bi·ªÉu di·ªÖn", "tr√¨nh di·ªÖn", "s√¢n kh·∫•u"]):
        context["purpose"] = "bi·ªÉu di·ªÖn"
    elif any(k in all_queries for k in ["trang tr√≠", "treo t∆∞·ªùng", "decor"]):
        context["purpose"] = "trang tr√≠"
    elif any(k in all_queries for k in ["s∆∞u t·∫ßm", "s∆∞u t·∫≠p", "collection"]):
        context["purpose"] = "s∆∞u t·∫ßm"
    
    # Nh·∫°c c·ª•
    instruments = ["s√°o", "ƒë√†n tranh", "ƒë√†n b·∫ßu", "ƒë√†n nguy·ªát", "ƒë√†n nh·ªã", "tr·ªëng"]
    for inst in instruments:
        if inst in all_queries:
            context["instrument"] = inst
            break
    
    # ƒê·ªô tu·ªïi
    import re
    age_match = re.search(r'(\d+)\s*tu·ªïi', all_queries)
    if age_match:
        context["age"] = age_match.group(1)
    
    return context

def build_concise_history(history: List[Dict[str, str]], max_turns: int = 3) -> str:
    """
    Ch·ªâ l·∫•y th√¥ng tin quan tr·ªçng t·ª´ l·ªãch s·ª≠, b·ªè qua chi ti·∫øt d∆∞ th·ª´a
    """
    if not history:
        return ""
    
    recent = history[-max_turns:] if len(history) > max_turns else history
    summary = []
    
    for item in recent:
        # Ch·ªâ gi·ªØ l·∫°i c√¢u h·ªèi ng·∫Øn g·ªçn
        user_q = item['user'][:100]  # Gi·ªõi h·∫°n 100 k√Ω t·ª±
        summary.append(f"Q: {user_q}")
    
    return "\n".join(summary)

async def process_chat_query(query: str, history: List[Dict[str, str]], intent: str) -> str:
    """
    X·ª≠ l√Ω c√¢u h·ªèi v·ªõi prompt ng·∫Øn g·ªçn, ƒë√∫ng tr·ªçng t√¢m
    """
    # Tr√≠ch xu·∫•t context t·ª´ history
    user_context = extract_user_context(history)
    history_summary = build_concise_history(history, max_turns=3)
    
    # Context string
    context_str = ""
    if any(user_context.values()):
        ctx_parts = []
        if user_context["level"]:
            ctx_parts.append(f"Tr√¨nh ƒë·ªô: {user_context['level']}")
        if user_context["budget"]:
            ctx_parts.append(f"Ng√¢n s√°ch: {user_context['budget']}")
        if user_context["purpose"]:
            ctx_parts.append(f"M·ª•c ƒë√≠ch: {user_context['purpose']}")
        if user_context["instrument"]:
            ctx_parts.append(f"Nh·∫°c c·ª•: {user_context['instrument']}")
        if user_context["age"]:
            ctx_parts.append(f"ƒê·ªô tu·ªïi: {user_context['age']}")
        context_str = " | ".join(ctx_parts)
    
    # Base instruction - QUAN TR·ªåNG: B·∫Øt bu·ªôc tr·∫£ l·ªùi ng·∫Øn g·ªçn
    base_rules = """
üéØ QUY T·∫ÆC B·∫ÆT BU·ªòC:
- Tr·∫£ l·ªùi T·ªêI ƒêA 3-4 c√¢u (60-80 t·ª´)
- ƒêi th·∫≥ng v√†o v·∫•n ƒë·ªÅ, kh√¥ng d√†i d√≤ng
- Kh√¥ng gi·∫£i th√≠ch qu√° chi ti·∫øt tr·ª´ khi ƒë∆∞·ª£c y√™u c·∫ßu
- Format r√µ r√†ng, d·ªÖ ƒë·ªçc
"""

    if intent == "consultation":
        prompt = f"""{base_rules}

Th√¥ng tin ng∆∞·ªùi d√πng: {context_str if context_str else "Ch∆∞a c√≥"}
L·ªãch s·ª≠: {history_summary if history_summary else "Kh√¥ng c√≥"}
C√¢u h·ªèi: {query}

Vai tr√≤: Chuy√™n gia t∆∞ v·∫•n nh·∫°c c·ª• d√¢n t·ªôc Vi·ªát Nam

H√£y tr·∫£ l·ªùi NG·∫ÆN G·ªåN theo format:
"[T√¨nh hu·ªëng]? N√™n ch·ªçn [nh·∫°c c·ª• c·ª• th·ªÉ - tone/size] gi√° [X]k, [1-2 ƒë·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t], k√®m [ph·ª• ki·ªán c·∫ßn thi·∫øt]."

V√≠ d·ª• t·ªët:
"B·∫°n m·ªõi h·ªçc s√°o tr√∫c? N√™n ch·ªçn s√°o tone D, tre gi√† gi√° 350k, d·ªÖ th·ªïi, √¢m ·∫•m, k√®m gi√°o tr√¨nh c∆° b·∫£n + t√∫i ƒë·ª±ng."

KH√îNG vi·∫øt d√†i d√≤ng, KH√îNG li·ªát k√™ nhi·ªÅu l·ª±a ch·ªçn tr·ª´ khi ƒë∆∞·ª£c h·ªèi."""

    elif intent == "guide":
        # Ki·ªÉm tra n·∫øu l√† follow-up question
        is_followup = any(k in query.lower() for k in ["chi ti·∫øt", "c·ª• th·ªÉ", "r√µ h∆°n", "th·∫ø n√†o", "nh∆∞ n√†o"])
        
        if is_followup and history:
            prompt = f"""{base_rules}

L·ªãch s·ª≠: {history_summary}
C√¢u h·ªèi follow-up: {query}

Ng∆∞·ªùi d√πng mu·ªën bi·∫øt CHI TI·∫æT H∆†N v·ªÅ c√¢u tr∆∞·ªõc. 
H√£y ƒëi s√¢u v√†o K·ª∏ THU·∫¨T C·ª§ TH·ªÇ trong 4-5 b∆∞·ªõc ng·∫Øn g·ªçn:

1. [B∆∞·ªõc 1 - h√†nh ƒë·ªông c·ª• th·ªÉ]
2. [B∆∞·ªõc 2 - h√†nh ƒë·ªông c·ª• th·ªÉ]
...

Tips quan tr·ªçng: [1 tips ng·∫Øn]

KH√îNG gi·∫£i th√≠ch l√Ω thuy·∫øt d√†i, CH·ªà h∆∞·ªõng d·∫´n h√†nh ƒë·ªông."""
        else:
            prompt = f"""{base_rules}

C√¢u h·ªèi: {query}
Th√¥ng tin: {context_str if context_str else "Kh√¥ng c√≥"}

Vai tr√≤: Gi√°o vi√™n d·∫°y nh·∫°c

Tr·∫£ l·ªùi ng·∫Øn g·ªçn 3-4 b∆∞·ªõc c∆° b·∫£n:
1. [B∆∞·ªõc 1]
2. [B∆∞·ªõc 2]
3. [B∆∞·ªõc 3]

Video g·ª£i √Ω: [T√™n video ng·∫Øn] - [link]

KH√îNG m√¥ t·∫£ chi ti·∫øt t·ª´ng b∆∞·ªõc, CH·ªà li·ªát k√™ h√†nh ƒë·ªông ch√≠nh."""

    elif intent == "story":
        prompt = f"""{base_rules}

C√¢u h·ªèi: {query}

Vai tr√≤: Ng∆∞·ªùi k·ªÉ chuy·ªán vƒÉn h√≥a

K·ªÉ ngu·ªìn g·ªëc trong 3-4 c√¢u:
- C√¢u 1: Nh·∫°c c·ª• l√† g√¨
- C√¢u 2: Xu·∫•t x·ª©/l·ªãch s·ª≠
- C√¢u 3: √ù nghƒ©a vƒÉn h√≥a

V√≠ d·ª• t·ªët:
"ƒê√†n b·∫ßu l√† nh·∫°c c·ª• ƒë·ªôc t·∫•u m·ªôt d√¢y c·ªßa Vi·ªát Nam. Xu·∫•t hi·ªán t·ª´ th·∫ø k·ª∑ 10, g·∫Øn li·ªÅn v·ªõi ca tr√π. √Çm thanh u·ªën l∆∞·ª£n nh∆∞ gi·ªçng h√°t, th·ªÉ hi·ªán t√¢m h·ªìn ng∆∞·ªùi Vi·ªát."

KH√îNG k·ªÉ qu√° chi ti·∫øt l·ªãch s·ª≠."""

    elif intent == "support":
        prompt = f"""{base_rules}

C√¢u h·ªèi: {query}
Th√¥ng tin: {context_str if context_str else "Kh√¥ng c√≥"}

Vai tr√≤: Nh√¢n vi√™n CSKH

Tr·∫£ l·ªùi 2-3 c√¢u ng·∫Øn g·ªçn, th√¢n thi·ªán:
- C√¢u 1: Tr·∫£ l·ªùi tr·ª±c ti·∫øp c√¢u h·ªèi
- C√¢u 2: G·ª£i √Ω/l·ªùi khuy√™n c·ª• th·ªÉ

V√≠ d·ª• t·ªët:
"B·∫£o qu·∫£n s√°o khi tr·ªùi ·∫©m: c·∫•t n∆°i kh√¥ r√°o, d√πng t√∫i h√∫t ·∫©m silica gel. Tr√°nh ƒë·ªÉ g·∫ßn c·ª≠a s·ªï ho·∫∑c n∆°i c√≥ n∆∞·ªõc."

KH√îNG gi·∫£i th√≠ch d√†i l√Ω do."""

    else:
        prompt = f"""{base_rules}

C√¢u h·ªèi: {query}

Tr·∫£ l·ªùi ng·∫Øn g·ªçn 2-3 c√¢u v·ªÅ nh·∫°c c·ª• d√¢n t·ªôc Vi·ªát Nam."""

    return await gemini_generate_text(prompt)